buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
		maven { url = 'https://plugins.gradle.org/m2/' }
		maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org/'
        }
		maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.parchmentmc', name: 'librarian', version: '1.+'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath group: 'gradle.plugin.com.matthewprenger', name: 'CurseGradle', version: '1.4.0'
    }
}
apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'com.matthewprenger.cursegradle'

archivesBaseName = "${mod_id}-forge"

minecraft {
    mappings channel: 'parchment', version: "${forge_parchment_version}"
    
    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        // This location is hardcoded in Forge and can not be changed.
        // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":common")
	annotationProcessor 'org.spongepowered:mixin:0.8.4-SNAPSHOT:processor'
	
	implementation fg.deobf(group: 'com.illusivesoulworks.spectrelib', name: 'spectrelib-forge', version: "${spectrelib_range}")
    jarJar fg.deobf(group: 'com.illusivesoulworks.spectrelib', name: 'spectrelib-forge', version: "${spectrelib_range}") {
        jarJar.pin(it, "${spectrelib_version}")
    }
}

tasks.withType(JavaCompile) {
    source(project(":common").sourceSets.main.allSource)
}

sourceSets {
    main {
        resources {
            srcDirs += '../licenses'
        }
    }
}

def replaceResources = tasks.register("replaceResources", Copy) {
    it.outputs.upToDateWhen { false }

    it.from(sourceSets.main.resources) {
        include "META-INF/mods.toml"
        expand 'version': version, 'forge_mc_version_range': forge_mc_version_range, 'forge_version_range': forge_version_range,
                'license': license, 'mod_id': mod_id, 'mod_author': mod_author, 'mod_description': mod_description,
                'mod_name': mod_name, 'issue_tracker': issue_tracker
    }
    it.from(project(":common").sourceSets.main.resources) {
        include "pack.mcmeta"
        expand 'mod_name': mod_name
    }
    it.into "$buildDir/resources/main/"
}

processResources {
    from project(":common").sourceSets.main.resources
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    exclude('META-INF/mods.toml')
    exclude('pack.mcmeta')

    filesMatching('*.mixins.json') {
        expand "refmap_target": "${mod_id}."
    }
    configure { finalizedBy(replaceResources) }
}

jar.finalizedBy('reobfJar')

reobf {
    jarJar {}
}

tasks.jarJar.configure {
    archiveClassifier.set("")
    from(rootProject.file("LICENSE"))
    from(rootProject.file("COPYING"))
    from(rootProject.file("COPYING.LESSER"))
    from(rootProject.file("README.md"))
    from(rootProject.file("CHANGELOG.md"))
}

jarJar {
    enable()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

curseforge {
    project {
        apiKey = findProperty('curseKey') ?: 0
        id = "${cf_id}"
        releaseType = "${cf_release}"
        changelogType = 'markdown'
        changelog = file("../CHANGELOG_LATEST.md")
		mainArtifact(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"))
        addArtifact(sourcesJar)
        "${cf_versions}".split(',').each {
            addGameVersion "${it}"
        }
    }
}
