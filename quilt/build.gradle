plugins {
    id 'org.quiltmc.loom' version '1.0-SNAPSHOT'
    id 'maven-publish'
    id 'idea'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.modrinth.minotaur' version '2.+'
}

archivesBaseName = "${mod_id}-quilt"

repositories {
    maven {
        name = 'Ladysnake Mods'
        url = 'https://maven.ladysnake.org/releases'
    }
    maven {
        name 'Quilt (Release)'
        url 'https://maven.quiltmc.org/repository/release/'
    }
    maven {
        name 'Quilt (Snapshot)'
        url 'https://maven.quiltmc.org/repository/snapshot/'
        content {
            includeGroup 'org.quiltmc.fabric_api_qsl'
            includeGroupByRegex 'org\\.quiltmc\\.qsl(?:\\.[a-z_]+)?'
        }
    }
    maven { url "https://maven.ryanliptak.com/" }
    maven { url "https://api.modrinth.com/maven" }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings(loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_mc_version}:${parchment_version}@zip")
    })
    modImplementation "org.quiltmc:quilt-loader:${quilt_loader_version}"
    modImplementation("org.quiltmc:qsl:${quilt_stdlib_version}") {
        exclude group: "net.fabricmc"
    }
    modImplementation "org.quiltmc.quilted-fabric-api:quilted-fabric-api:${quilted_fabric_api_version}"

    implementation group: 'com.electronwill.night-config', name: 'core', version: '3.6.5'
    implementation group: 'com.electronwill.night-config', name: 'toml', version: '3.6.5'
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    implementation project(":common")

    modCompileOnly ("maven.modrinth:mealapi:${mealapi_version}") {
        transitive = false
    }
    modCompileOnly("squeek.appleskin:appleskin-fabric:${appleskin_version}") {
        transitive = false
    }
    modImplementation group: 'com.illusivesoulworks.spectrelib', name: 'spectrelib-quilt', version: "${spectrelib_range}"

    // Embedded
    include group: 'com.illusivesoulworks.spectrelib', name: 'spectrelib-quilt', version: "${spectrelib_version}"
}

loom {
    runs {
        client {
            client()
            setConfigName("Quilt Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Quilt Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

sourceSets {
    main {
        resources {
            srcDirs += '../licenses'
        }
    }
}

processResources {
    from project(":common").sourceSets.main.resources
    inputs.property "version", project.version

    filesMatching("quilt.mod.json") {
        expand 'version': project.version, 'quilt_mc_version_range': project.quilt_mc_version_range, 'license': project.license,
                'mod_id': project.mod_id, 'mod_author': project.mod_author, 'mod_description': project.mod_description,
                'mod_name': project.mod_name
    }

    filesMatching("pack.mcmeta") {
        expand 'mod_name': project.mod_name
    }

    filesMatching('*.mixins.json') {
        expand "refmap_target": "${archivesBaseName}-"
    }
}

tasks.withType(JavaCompile) {
    source(project(":common").sourceSets.main.allSource)
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
        }
    }

    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

curseforge {
    project {
        apiKey = findProperty('curseKey') ?: 0
        id = "${cf_id}"
        releaseType = "${release_type}"
        changelogType = 'markdown'
        changelog = file("../CHANGELOG_LATEST.md")
        addGameVersion "Java 17"
        addGameVersion "Quilt"
        "${release_versions}".split(',').each {
            addGameVersion "${it}"
        }
        addArtifact(sourcesJar)
        mainArtifact(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"))

        relations {
            requiredDependency 'qsl'
        }

        afterEvaluate {
            uploadTask.dependsOn(remapJar)
        }
    }
    options {
        forgeGradleIntegration = false
    }
}

modrinth {
    token = findProperty('modrinthKey') ?: 0
    projectId = "${modrinth_id}"
    versionName = getArchivesBaseName() + "-" + getVersion()
    versionType = "${release_type}"
    changelog = file('../CHANGELOG_LATEST.md').text
    uploadFile = file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")
    additionalFiles = [sourcesJar]
    gameVersions = "${release_versions}".split(",") as List<String>
    loaders = ["quilt"]
    dependencies {
        required.project "qsl"
    }
}
